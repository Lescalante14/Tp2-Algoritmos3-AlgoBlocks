@startuml

class Personaje{
    + estadoLapiz(): String
    + ejecutarBloque(unBloque): void
    + activarLapiz(): void
    + desactivarLapiz(): void
    + moverADerecha(): void
    + moverAIzquierda(): void
    + moverArriba(): void
    + moverAbajo(): void
}

abstract Bloque{
     + {abstract} ejecutar(Personaje unPersonaje): void
}

class BloqueMoverIzquierda {
    + ejecutar(unPersonaje): void
}

class BloqueMoverADerecha {
    + ejecutar(unPersonaje): void
}

class BloqueMoverAbajo {
    + ejecutar(unPersonaje): void
}

class BloqueMoverArriba {
    + ejecutar(unPersonaje): void
}

class BloqueBajarLapiz {
    + ejecutar(unPersonaje): void
}

class BloqueSubirLapiz {
    + ejecutar(unPersonaje): void
}

interface EstadoLapiz {
    + {abstract} dameEstado(): String
}

class EstadoActivado {
    + dameEstado(): String
}

class EstadoDesactivado {
    + dameEstado(): String
}

class Posicion {
    coordenadaX: int
    coordenadaY: int
    + compararPosiciones(posicion1, posicion2): boolean
    + {static} derechaDe(unaPosicion): Posicion
    + {static} izquierdaDe(unaPosicion): Posicion
    + {static} arribaDe(unaPosicion): Posicion
    + {static} abajoDe(unaPosicion): Posicion
}

Personaje <.. Bloque
Personaje "1" *-- "1" EstadoLapiz
Personaje "1" *-- "1" Posicion

Bloque <|-- BloqueMoverADerecha
Bloque <|--left BloqueMoverIzquierda
Bloque <|-- BloqueMoverAbajo
Bloque <|-- BloqueMoverArriba
Bloque <|-- BloqueBajarLapiz
Bloque <|--right BloqueSubirLapiz

EstadoLapiz <|.. EstadoActivado
EstadoLapiz <|.. EstadoDesactivado

@enduml

class BloquesDisponibles {
    - bloques : Collection
}

class Dibujo {

}

@enduml